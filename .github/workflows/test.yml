# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
      - name: Find version
        run: |
          VERSION=$(grep "\"version\"" ./package.json | cut -f4 -d'"')
          # check if there's already a tag created with this version.
          # first make sure we have all tags locally
          git fetch --all --tags
          exists=$(git tag --list "${VERSION}")
          if [[ -n "$exists" ]]; then
            echo "There is already a tag for version <$VERSION> !"
            echo "Manually bumping version" 
            NEWVERSION=$(npm --no-git-tag-version version patch)
            echo "Manually bumping version from ${VERSION} to ${NEWVERSION}"
            VERSION="${NEWVERSION}"
            mvn -q -B versions:set -DnewVersion="${VERSION}" -DgenerateBackupPoms=false
            git add package*.json pom.xml
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Automatically bumped version to ${VERSION}"
            git push
            # do not exit with an error, as the push using the gh bot does not generate a new build
            # exit 2
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Create a Release
        uses: actions/create-release@v1
        if: success() && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

