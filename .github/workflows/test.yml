# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: CI-${{github.ref}}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2
        with:
          # fetch everything, to be able to automatically calculate changelog since last tag
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
          check-latest: true
      - name: Find version
        run: |
          VERSION=$(grep "\"version\"" ./package.json | cut -f4 -d'"')
          OLD_VERSION="${VERSION}"
          # check if there's already a tag created with this version.
          # first make sure we have all tags locally
          git fetch --all --tags
          exists=$(git tag --list "${VERSION}")
          while [[ -n "$exists" ]];
          do
            echo "There is already a tag for version <$VERSION> !"
            echo "Manually bumping version" 
            NEWVERSION=$(npm --no-git-tag-version version patch)
            if [[ "$NEWVERSION" =~ ^v.* ]]; then
              NEWVERSION=${NEWVERSION:1}
            fi
            echo "Manually bumping version from ${VERSION} to ${NEWVERSION}"
            VERSION="${NEWVERSION}"
            mvn -q -B versions:set -DnewVersion="${VERSION}" -DgenerateBackupPoms=false
            
            # now re-check if version is ok without tag
            exists=$(git tag --list "${VERSION}")
            # do not exit with an error, as the push using the gh bot does not generate a new build
            # exit 2
          done

          echo 'Checking if changelog already exists for new version'
          # taken from: https://stackoverflow.com/questions/40450238/parse-a-changelog-and-extract-changes-for-a-version
          msg=$(awk -v ver="${VERSION}" '
          /^## / { if (p) { exit }; if ($2 == ver) { p=1; next } } p && NF
          ' ./Changelog.md)
          echo "for version: ${VERSION} extracted changelog messages: ${msg}"
          if [[ -z "${msg}" ]]; then
            # we bumped the version without changelog, so add automatic release notes
            # as the release message, get all commits since last tag (each in a separate line)
            commits=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline)
            # prepend each commit message with a *
            msg=''
            while IFS= read -r line
            do
              msg="${msg}* ${line}
              "
            done <<< "${commits}"
            file='./Changelog.md.update'
            echo '# Release Notes' > $file
            echo '' >> $file
            echo "## ${VERSION} ($(date -I))" >> $file
            echo "${msg}" >> $file
            echo "Created automatic changelog"
            cat "${file}"
            grep -v '# Release Notes' ./Changelog.md >> $file
            mv "$file" ./Changelog.md
            git add ./Changelog.md
          fi

          changedFiles=$(git ls-files --deleted --modified --others --exclude-standard)
          if [[ -n "$changedFiles" ]]; then
            echo "committing and pushing version changes"
            git add package*.json pom.xml Changelog.md
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Automatically bumped version to ${VERSION}"
            git push
          fi

          #echo "RELEASE_NOTES_TEXT=${msg}" >> $GITHUB_ENV
          echo 'RELEASE_NOTES_TEXT<<EOF' >> $GITHUB_ENV
          echo "${msg}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Create a Release
        uses: softprops/action-gh-release@v1
        if: success() && github.ref == 'refs/heads/main'
        with:
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          tag_name: ${{env.VERSION}}
          body: ${{ env.RELEASE_NOTES_TEXT }}
        env:
          GITHUB_REPOSITORY: my_gh_org/my_gh_repo

